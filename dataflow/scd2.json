{
	"name": "scd2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "SCD2Cust",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "SCD2Custm",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "SCD2Custm",
						"type": "DatasetReference"
					},
					"name": "sink1"
				},
				{
					"dataset": {
						"referenceName": "SCD2Custm",
						"type": "DatasetReference"
					},
					"name": "sink2"
				}
			],
			"transformations": [
				{
					"name": "addcolumn"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "AlterRow1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          LastUpdated as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> source1",
				"source(output(",
				"          id as integer,",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          LastUpdated as timestamp,",
				"          is_active as boolean",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source2",
				"source1 derive(is_active = 1) ~> addcolumn",
				"source2 select(mapColumn(",
				"          SQL_id = id,",
				"          SQL_CustomerID = CustomerID,",
				"          SQL_Name = Name,",
				"          SQL_Email = Email,",
				"          SQL_Phone = Phone,",
				"          SQL_Address = Address,",
				"          SQL_City = City,",
				"          SQL_State = State,",
				"          SQL_ZipCode = ZipCode,",
				"          SQL_LastUpdated = LastUpdated,",
				"          SQL_is_active = is_active",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"source1, select1 lookup(CustomerID == SQL_CustomerID,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"lookup1 filter(!isNull(SQL_CustomerID)) ~> filter1",
				"filter1 derive(SQL_is_active = 0) ~> derivedColumn1",
				"derivedColumn1 alterRow(updateIf(1==1)) ~> AlterRow1",
				"addcolumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          LastUpdated as timestamp,",
				"          is_active as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 2,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
				"AlterRow1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id as integer,",
				"          CustomerID as integer,",
				"          Name as string,",
				"          Email as string,",
				"          Phone as string,",
				"          Address as string,",
				"          City as string,",
				"          State as string,",
				"          ZipCode as string,",
				"          LastUpdated as timestamp,",
				"          is_active as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:false,",
				"     updateable:true,",
				"     upsertable:false,",
				"     keys:['id'],",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 1,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          id = SQL_id,",
				"          CustomerID = SQL_CustomerID,",
				"          Name = SQL_Name,",
				"          Email = SQL_Email,",
				"          Phone = SQL_Phone,",
				"          Address = SQL_Address,",
				"          City = SQL_City,",
				"          State = SQL_State,",
				"          ZipCode = SQL_ZipCode,",
				"          LastUpdated = SQL_LastUpdated,",
				"          is_active = SQL_is_active",
				"     )) ~> sink2"
			]
		}
	}
}