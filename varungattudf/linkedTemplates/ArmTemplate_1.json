{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "varungattudf"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/pipeline1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ForEach1",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Get Metadata1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Get Metadata1').output.childItems",
								"type": "Expression"
							},
							"activities": [
								{
									"name": "Copy data1",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "DelimitedTextSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "DelimitedTextReadSettings"
											}
										},
										"sink": {
											"type": "AzureSqlSink",
											"writeBehavior": "insert",
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "multifiles",
											"type": "DatasetReference",
											"parameters": {
												"filename": {
													"value": "@item().name",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AzureSqlTable3",
											"type": "DatasetReference",
											"parameters": {
												"table_name": {
													"value": "@substring(item().name,0, lastIndexOf(item().name, '_' ))",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					},
					{
						"name": "Get Metadata1",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DelimitedText1",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobFSReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCD1_customerdata",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCD1_customer",
								"type": "DatasetReference"
							},
							"name": "Customer"
						}
					],
					"transformations": [
						{
							"name": "alterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source1 alterRow(upsertIf(1==1)) ~> alterRow1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:false,",
						"     upsertable:true,",
						"     keys:['CustomerID'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          CustomerID,",
						"          Name,",
						"          Email,",
						"          Phone,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          LastUpdated",
						"     )) ~> Customer"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCD2Cust",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SCD2Custm",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCD2Custm",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SCD2Custm",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "addcolumn"
						},
						{
							"name": "select1"
						},
						{
							"name": "lookup1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn1"
						},
						{
							"name": "AlterRow1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 derive(is_active = 1) ~> addcolumn",
						"source2 select(mapColumn(",
						"          SQL_id = id,",
						"          SQL_CustomerID = CustomerID,",
						"          SQL_Name = Name,",
						"          SQL_Email = Email,",
						"          SQL_Phone = Phone,",
						"          SQL_Address = Address,",
						"          SQL_City = City,",
						"          SQL_State = State,",
						"          SQL_ZipCode = ZipCode,",
						"          SQL_LastUpdated = LastUpdated,",
						"          SQL_is_active = is_active",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"source1, select1 lookup(CustomerID == SQL_CustomerID,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> lookup1",
						"lookup1 filter(!isNull(SQL_CustomerID)) ~> filter1",
						"filter1 derive(SQL_is_active = 0) ~> derivedColumn1",
						"derivedColumn1 alterRow(updateIf(1==1)) ~> AlterRow1",
						"addcolumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"AlterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id = SQL_id,",
						"          CustomerID = SQL_CustomerID,",
						"          Name = SQL_Name,",
						"          Email = SQL_Email,",
						"          Phone = SQL_Phone,",
						"          Address = SQL_Address,",
						"          City = SQL_City,",
						"          State = SQL_State,",
						"          ZipCode = SQL_ZipCode,",
						"          LastUpdated = SQL_LastUpdated,",
						"          is_active = SQL_is_active",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/scd2o1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "SCD2Cust",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "SCD2o1",
								"type": "DatasetReference"
							},
							"name": "source2"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "SCD2o1",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "SCD2o1",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "derivedColumn1"
						},
						{
							"name": "filter1"
						},
						{
							"name": "derivedColumn3"
						},
						{
							"name": "exists1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "exists2"
						}
					],
					"scriptLines": [
						"source(output(",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> source2",
						"source1 derive(is_active = 1,",
						"          hashkey = md5(Name+Email+Phone)) ~> derivedColumn1",
						"source2 filter(is_active == true()) ~> filter1",
						"filter1 derive(is_active = 0,",
						"          s2_hashkey = md5(Name+Email+Phone)) ~> derivedColumn3",
						"derivedColumn1, derivedColumn3 exists(source1@CustomerID == source2@CustomerID && hashkey == s2_hashkey,",
						"     negate:true,",
						"     partitionBy('hash', 1),",
						"     broadcast: 'both')~> exists1",
						"exists2 alterRow(updateIf(1==1)) ~> alterRow1",
						"derivedColumn3, derivedColumn1 exists(source2@CustomerID==source1@CustomerID&&s2_hashkey!=hashkey,",
						"     negate:false,",
						"     broadcast: 'auto')~> exists2",
						"exists1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 2,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sink1",
						"alterRow1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id as integer,",
						"          CustomerID as integer,",
						"          Name as string,",
						"          Email as string,",
						"          Phone as string,",
						"          Address as string,",
						"          City as string,",
						"          State as string,",
						"          ZipCode as string,",
						"          LastUpdated as timestamp,",
						"          is_active as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:false,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['id'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 1,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          id,",
						"          CustomerID,",
						"          Name,",
						"          Email,",
						"          Phone,",
						"          Address,",
						"          City,",
						"          State,",
						"          ZipCode,",
						"          LastUpdated,",
						"          is_active",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD1_single')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "dataflow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"Customer": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-18T11:28:42Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2_single')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd2",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd2",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-18T12:29:23Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD2o1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "scd2o1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "scd2o1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"source2": {},
									"sink1": {},
									"sink2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2025-02-20T17:32:13Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/scd2o1')]"
			]
		}
	]
}